<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MeelGroup</title>
    <link>/post/</link>
    <description>Recent content in Posts on MeelGroup</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CrystalBall: SAT solving, Data Gathering, and Machine Learning</title>
      <link>/post/crystallball/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>/post/crystallball/</guid>
      <description>Link to the original post on CrystallBall.
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>Knowledge Compilation meets Uniform Sampling</title>
      <link>/post/kus/</link>
      <pubDate>Fri, 03 May 2019 11:06:17 +0530</pubDate>
      
      <guid>/post/kus/</guid>
      <description>This blogpost is based on our paper that got published in the procedings of International Conference on Logic for Programming, Artificial Intelligence and Reasoning (LPAR), 2018. The code is available here. The primary contribution of this work is marrying knowledge compilation with uniform sampling to design a new uniform sampler KUS. The main result is that KUS is able to solve more number of benchmarks than existing state-of-the-art uniform and almost-uniform samplers beating them by orders of magnitude in terms of runtime: Uniform Sampling</description>
    </item>
    
    <item>
      <title>WAPS: Weighted and Projected Sampling</title>
      <link>/post/waps/</link>
      <pubDate>Fri, 03 May 2019 11:06:17 +0530</pubDate>
      
      <guid>/post/waps/</guid>
      <description>This blogpost talks about our tool WAPS. Specifically, we will talk about how we are able to utilize the idea of sampling using knowledge compilations (d-DNNFs) from our previous work (KUS) and generalize it in order to achieve weighted and projected sampling. You can read the paper here and get the tool here. You can read the previous blog that describes uniform sampling using knowledge compilations, though it is not absolutely necessary for this post.</description>
    </item>
    
    <item>
      <title>GANAK: A Scalable Probabilistic Exact Model Counter</title>
      <link>/post/ganak/</link>
      <pubDate>Wed, 03 Apr 2019 11:06:17 +0530</pubDate>
      
      <guid>/post/ganak/</guid>
      <description>This blogpost talks about our tool GANAK that inherits current advancements in SAT solving and model counting, improves upon them and contributes new ideas, thereby outperforming state-of-the-art model counters. The source code of GANAK is available here and the paper is available here. The main result is that we can solve a lot more problems than before: Let&amp;rsquo;s first define Model Counting. Model Counting
Given a Boolean formula $F$, over a set of variable $X$, model counting (aka #SAT) seeks to compute the number of solutions of $F$.</description>
    </item>
    
    <item>
      <title>Bosphorus: An ANF and CNF simplifier and converter</title>
      <link>/post/bosphorus/</link>
      <pubDate>Sat, 05 Jan 2019 11:06:17 +0530</pubDate>
      
      <guid>/post/bosphorus/</guid>
      <description>We are happy to release our ANF and CNF simplifier and converter called Bosphorus. It has helped us break multiple real-world ciphers. It has been re-released with major work by Davin Choo &amp;amp; Kian Ming A. Chai from DSO National Laboratories Singapore and Mate Soos &amp;amp; Kuldeep Meel from NUS. The paper will be published at the DATE 2019 conference.
ANFs and CNFs Algebraic Normal Form is a form that is used by most cryptographers to describe symmetric ciphers, hash algorithms, and lately a lot of post-quantum asymmetric ciphers.</description>
    </item>
    
    <item>
      <title>ApproxMCv3: A modern approximate model counter</title>
      <link>/post/approxmcv3/</link>
      <pubDate>Sun, 25 Nov 2018 11:06:17 +0530</pubDate>
      
      <guid>/post/approxmcv3/</guid>
      <description>ApproxMC is a scalable, approximate model counter that provides PAC (probably approximately correct) guarantees. We have been working very hard on speeding up approximate model counting for SAT and have made real progress. The research paper, accepted at AAAI-19 is available here. The code is available here (release with static binary here). The main result is that we can solve a lot more problems than before. The speed of solving is orders(!</description>
    </item>
    
  </channel>
</rss>